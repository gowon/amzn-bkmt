@page "/"
@using Stubble.Core
@using Stubble.Core.Builders
@using Bookmarklet.Wasm.Models
@using NUglify
@inject HttpClient HttpClient
@inject IJSRuntime JsInterop
@inject ISnackbar Snackbar

<MudCard Outlined="true">
    <MudCardContent>
        <MudText Typo="Typo.h2">About</MudText>
        <MudText Typo="Typo.body2">The Amazon Affiliate Bookmarklet Studio is a small application to help generate bookmarklets for Amazon Affiliates you regularly need to append their Affiliate tags to Amazon product links. The resulting bookmarklet is &lt;2.3kB in size, and consumes &lt;10kB bandwidth to load.</MudText>
    </MudCardContent>
</MudCard>

<MudExpansionPanels MultiExpansion="true">
    <MudExpansionPanel Text="Amazon Affiliate Information" IsInitiallyExpanded="true">
        <MudTextField @bind-Value="BasePath" T="string" Label="Base Address"/>
        <MudTextField @bind-Value="AffiliateTag" T="string" Label="Affiliate Tag"/>
        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="GenerateBookmarklet">Generate Bookmarklet</MudButton>
    </MudExpansionPanel>
    <MudExpansionPanel @bind-IsExpanded="BookmarkletAccordionExpanded" Text="Save Bookmarklet">
        <MudText Typo="Typo.body2">You can use the bookmarklet by dragging this <MudLink @bind-Href="BookmarkletCode" Underline="Underline.Always">Generate Affiliate Link</MudLink> to your browser's bookmark bar, or copy the source code below:</MudText>
        <MudTextField @bind-Value="BookmarkletCode" T="string" Label="Source Code" Lines="7"
                      ReadOnly="true" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.CopyAll"
                      OnAdornmentClick="CopyToClipboard"/>
    </MudExpansionPanel>
</MudExpansionPanels>

@code
{
    private readonly StubbleVisitorRenderer _stubble = new StubbleBuilder().Build();
    private string _bookmarkletTemplate;
    public string BasePath { get; set; } = "https://amzn.com/dp/";
    public string AffiliateTag { get; set; }
    public string BookmarkletCode { get; set; }
    public bool BookmarkletAccordionExpanded { get; set; }

    public async Task CopyToClipboard()
    {
        await JsInterop.InvokeVoidAsync("navigator.clipboard.writeText", BookmarkletCode);
        Snackbar.Add("Copied code to the clipboard!", Severity.Success);
    }

    private async Task GenerateBookmarklet()
    {
        if (string.IsNullOrWhiteSpace(_bookmarkletTemplate))
        {
            _bookmarkletTemplate = await HttpClient.GetStringAsync("bookmarklet.mustache.js");
        }
        
        var rendered = await _stubble.RenderAsync(_bookmarkletTemplate, new AmazonAffiliate { AffiliateTag = AffiliateTag, AmazonBasePath = BasePath });
        var minified = Uglify.Js(rendered).Code;
        BookmarkletCode = $"javascript:{minified}";
        BookmarkletAccordionExpanded = true;
    }
}